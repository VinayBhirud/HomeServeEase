CREATE TABLE users (
  user_id INT IDENTITY(1, 1) PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  mobile VARCHAR(20) NOT NULL,
  password VARCHAR(100) NOT NULL,
  dob DATE NOT NULL,
  role_id INT NOT NULL,
  reg_date DATE NOT NULL,
  dummy_column1 VARCHAR(50),
  dummy_column2 VARCHAR(50),
  dummy_column3 VARCHAR(50),
  dummy_column4 VARCHAR(50),
  dummy_column5 VARCHAR(50),
  UNIQUE NONCLUSTERED (email),
  UNIQUE NONCLUSTERED (mobile),
  FOREIGN KEY (role_id) REFERENCES user_roles(role_id)
);

-------------------------------------------------------------------------------------------------------------
CREATE TABLE service_providers (
  sp_id INT IDENTITY(1, 1) PRIMARY KEY,
  user_id INT NOT NULL,
  profession VARCHAR(50) NOT NULL,
  experience INT NOT NULL,
  expertise VARCHAR(100) NOT NULL,
  description VARCHAR(200) NOT NULL,
  charges DECIMAL(10, 2) NOT NULL DEFAULT 0.0,
  profile_pic VARCHAR(100) NOT NULL,
  address_id INT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (address_id) REFERENCES addresses(address_id)
);

---------------------------------------------------------------------------------------------------------------------
CREATE TABLE customers (
  cust_id INT IDENTITY(1, 1) PRIMARY KEY,
  user_id INT NOT NULL,
  address_id INT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (address_id) REFERENCES addresses(address_id)
);

-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE addresses (
  address_id INT IDENTITY(1, 1) PRIMARY KEY,
  city VARCHAR(50) NOT NULL,
  district VARCHAR(50) NOT NULL,
  state VARCHAR(50) NOT NULL,
  address VARCHAR(100) NOT NULL,
  pin_code VARCHAR(10) NOT NULL
);

------------------------------------------------------------------------------------------------------------------------
CREATE TABLE user_roles (
  role_id INT IDENTITY(1, 1) PRIMARY KEY,
  role VARCHAR(20) NOT NULL
);

-------------------------------------------------------------------------------------------------------------------
CREATE TABLE appointments (
  apt_id INT IDENTITY(1, 1) PRIMARY KEY,
  ord_description VARCHAR(200),
  cust_id INT NOT NULL,
  sp_id INT NOT NULL,
  date DATE NOT NULL,
  apt_status VARCHAR(20) NOT NULL,
  FOREIGN KEY (cust_id) REFERENCES customers(cust_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (sp_id) REFERENCES service_providers(sp_id)
);

-------------------------------------------------------------------------------------------------------------------------
CREATE TABLE transactions (
  transaction_id INT IDENTITY(1, 1) PRIMARY KEY,
  user_id INT,
  payment_id INT,
  apt_id INT,
  sp_id INT,
  payment_token_id INT,
  amount DECIMAL(10, 2),
  trans_status VARCHAR(20),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (payment_id) REFERENCES payment_details(payment_id),
  FOREIGN KEY (apt_id) REFERENCES appointments(apt_id),
  FOREIGN KEY (sp_id) REFERENCES service_providers(sp_id)
);

------------------------------------------------------------------------------------------------------------------------
CREATE TABLE payment_details (
  payment_id INT IDENTITY(1, 1) PRIMARY KEY,
  user_id INT NOT NULL,
  card_number VARCHAR(16) NOT NULL,
  card_expiry DATE NOT NULL,
  card_cvv VARCHAR(4) NOT NULL,
  payment_date DATETIME NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  transaction_status VARCHAR(20) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE
);

------------------------------------------------------------------------------------------------------------------------
CREATE TABLE reviews (
  review_id INT IDENTITY(1, 1) PRIMARY KEY,
  user_id INT NOT NULL,
  cust_id INT NOT NULL,
  sp_id INT NOT NULL,
  apt_id INT NOT NULL,
  review VARCHAR(200),
  complaint VARCHAR(200),
  ratings INT,
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (cust_id) REFERENCES customers(cust_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (sp_id) REFERENCES service_providers(sp_id),
  FOREIGN KEY (apt_id) REFERENCES appointments(apt_id)
);
